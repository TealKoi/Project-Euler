#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28

#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

import time
import math

def count_of_divisors(n):
  d = {}
  count = 1
  while n%2 == 0:
    n = n/2
    try:
      d[2] += 1
    except KeyError:
      d[2] = 1 

  for i in range(3, int(math.sqrt(n+1)),2):
    while n%i == 0 and i != n:
      n = n/i
      try:
        d[i] += 1
      except KeyError:
        d[i] = 1

  d[n] = 1
  for _,v in d.items():
    count = count*(v+1)

  return count

def triange_number(num):
  next = 1+int(math.sqrt(1+(8*num)))
  return num+(next/2)

def main():
  i = 1
  while count_of_divisors(i) < 500:
    i = triange_number(i)
  print(int(i))

if __name__ == "__main__":
  start = time.perf_counter()
  main()
  print("Program executed in ",round(float(time.perf_counter()-start),2)," second(s)")